@using DodoPlanner.Services
@using DodoPlanner.Models
@using Microsoft.AspNetCore.Components.Web
@using DodoPlanner.Pages
@using System.Globalization
@inject SqlTdListService tdlistservice

    <center>
        <h3>@tdlistservice.GetList(theListId).Title </h3>
        <h5>@tdlistservice.GetAllTasks().Where(x => x.ListId == theListId).Count() tasks</h5>

        <p>Edit Tasks: <input type="checkbox" @onclick="(e => editMode = !editMode)" /></p>


        <table class="table table-borderless" style="width: 50%; text-align: center;" align="center">
            <tbody>
                @foreach (var task in tdlistservice.GetList(theListId).tasks)
                {
                    <tr>
                        <td>
                            @if (task.completed && !editMode)
                            {
                                style = "text-decoration: line-through; width: 50%";
                            }
                            else
                            {
                                style = "width: 50%;";
                            }
                            @if (editMode)
                            {
                                <div class="input-group">
                                    <input class="form-control" value="@task.title" @onchange="(e => {task.title = e.Value.ToString(); tdlistservice.editTask(task); })" />
                                    <input class="form-control" type="date" value="@task.duedate.ToString(format)" @onchange="(e => {task.duedate = DateTime.ParseExact(e.Value.ToString(), format, CultureInfo.InvariantCulture); tdlistservice.editTask(task); })" />
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-danger btn-sm" @onclick="(e => RemoveTask(task.TaskID))"> ╳ </button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <button class="btn btn-outline-secondary btn-sm" style="@style" @onclick="(e => ToggleCompleted(task.TaskID))"> @task.title  @task.duedate.ToString("MM/dd/yyyy")</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="input-group" style="width: 50%;">
            <input class="form-control" @bind="newtasktitle" />
            <input class="form-control" type="date" @bind="newduedate" />
            <button class="btn btn-outline-success" @onclick="(e => AddNewTask())">Add New Task </button>
        </div>
    </center>

    @code {

        bool editMode { get; set; }
        string format = "yyyy-MM-dd";

        public string style { get; set; }

        private Guid theListId;

        [Parameter]
        public string ListId
        {
            get => theListId.ToString();
            set
            {
                theListId = Guid.Parse(value);
            }
        }


        string newtasktitle
        {
            get;
            set;
        }
        DateTime newduedate { get; set; }

        void AddNewTask()
        {
            var newTask = new task { title = newtasktitle, duedate = newduedate , ListId=theListId};
            tdlistservice.AddTask(newTask, theListId);
            newtasktitle = string.Empty;
            newduedate = DateTime.Now;
        }

        public void ToggleCompleted(Guid TaskId)
        {
            tdlistservice.ToggleCompleted(theListId, TaskId);
        }

        public void RemoveTask(Guid TaskId)
        {
            tdlistservice.RemoveTask(TaskId, theListId);
        }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            newduedate = DateTime.Now;
            editMode = false;
        }
    }
