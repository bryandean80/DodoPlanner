@using DodoPlanner.Services
@using DodoPlanner.Models
@using Microsoft.AspNetCore.Components.Web
@using DodoPlanner.Pages
@using System.Globalization 
@inject JsonFileTdListService tdlistservice

<h3>@tdlistservice.GetList(theListId).Title </h3>

<p>Edit Tasks: <input type="checkbox" @onclick="(e => editMode = !editMode)" /></p>

@foreach (var task in tdlistservice.GetList(theListId).tasks)
{
    <div>
        @if (task.completed && !editMode)
        {
            style = "text-decoration: line-through;";
        }
        else
        {
            style = string.Empty;
        }
        <p style="@style">
            @if (editMode)
            {
                <input value="@task.title" @onchange="(e => {task.title = e.Value.ToString(); tdlistservice.writeJson(task, theListId);})" />
                <input type ="date" value="@task.duedate.ToString(format)" @onchange="(e => {task.duedate = DateTime.ParseExact(e.Value.ToString(), format, CultureInfo.InvariantCulture); tdlistservice.writeJson(task, theListId);})" />
                <input type="checkbox" checked="@task.completed" @onclick="(e => ToggleCompleted(task.TaskID))" />

                <button @onclick="(e => RemoveTask(task.TaskID))">Remove Task </button>
            }
            else
            {
                <span>
                    @task.title  @task.duedate.ToString("MM/dd/yyyy") <input type="checkbox" checked="@task.completed" @onclick="(e => ToggleCompleted(task.TaskID))" />
                </span> 
            }
        </p>
        
    </div>
}
<input @bind="newtasktitle" />
<input type="date" @bind ="newduedate" />
<button @onclick="(e => AddNewTask())">Add New Task </button>

@code {

    bool editMode { get; set; }
    string format = "yyyy-MM-dd";

    public string style { get; set; }

    private Guid theListId;

    [Parameter]
    public string ListId {
        get => theListId.ToString();
        set
        {
            theListId = Guid.Parse(value);
        }
    }


    string newtasktitle { get;
        set; }
    DateTime newduedate { get; set; }

    void AddNewTask()
    {
        var newTask = new task { title = newtasktitle, duedate = newduedate};
        tdlistservice.AddTask(newTask, theListId);
        newtasktitle = string.Empty;
        newduedate = DateTime.Now;
    }

    public void ToggleCompleted(Guid TaskId)
    {
        tdlistservice.ToggleCompleted(theListId, TaskId);
    }

    public void RemoveTask(Guid TaskId)
    {
        tdlistservice.RemoveTask(TaskId, theListId);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        newduedate = DateTime.Now;
        editMode = false;
    }
}
