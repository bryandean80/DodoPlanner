#pragma checksum "C:\Users\bbdea\Documents\DoDoPlanner\DodoPlanner\DodoPlanner\Components\Calendar.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "803480959c33d07cac5544e224458a51a301f252"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DodoPlanner.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\bbdea\Documents\DoDoPlanner\DodoPlanner\DodoPlanner\Components\Calendar.razor"
using DodoPlanner.Services;

#line default
#line hidden
#nullable disable
    public partial class Calendar : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 61 "C:\Users\bbdea\Documents\DoDoPlanner\DodoPlanner\DodoPlanner\Components\Calendar.razor"
       
    bool maxDayReached;
    DateTime month { get; set; }

    string colorstyle { get; set; }

    DateTime nextMonth
    {
        get
        {
            return month.AddMonths(1);
        }
    }

    DateTime previousMonth
    {
        get
        {
            return month.AddMonths(-1);
        }
    }

    DayOfWeek startingDay { get; set; }
    int maxDay { get; set; }
    int dayOfMonthCounter { get; set; }

    int monthNum;
    int yearNum;

    [Parameter]
    public string Month
    {
        get
        {
            return monthNum.ToString();
        }
        set
        {
            int val;
            bool result = int.TryParse(value, out val);
            if (result)
            {
                monthNum = val;
            }
            else
            {
                monthNum = DateTime.Now.Month;
            }
        }
    }

    [Parameter]
    public string Year
    {
        get
        {
            return yearNum.ToString();
        }
        set
        {
            int val;
            bool result = int.TryParse(value, out val);
            if (result)
            {
                yearNum = val;
            }
            else
            {
                yearNum = DateTime.Now.Year;
            }
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        month = new DateTime(yearNum, monthNum, 1);
        startingDay = month.DayOfWeek;
        maxDay = month.AddMonths(1).AddDays(-1).Day;
        maxDayReached = false;
        dayOfMonthCounter = 0;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SqlTdListService tdlistservice { get; set; }
    }
}
#pragma warning restore 1591
